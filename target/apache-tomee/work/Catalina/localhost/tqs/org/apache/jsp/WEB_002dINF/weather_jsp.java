/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat (TomEE)/8.5.32 (7.0.5)
 * Generated at: 2019-05-06 16:49:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import ua.pt.restapi.models.DistrictData;
import java.util.List;

public final class weather_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("file:/home/ana/Desktop/UA/TQS/TQS_Homework1_17e6/TQS_Homework1/target/apache-tomee/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1557161369000L));
    _jspx_dependants.put("jar:file:/home/ana/Desktop/UA/TQS/TQS_Homework1_17e6/TQS_Homework1/target/apache-tomee/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425978670000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("ua.pt.restapi.models.DistrictData");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <title>Weather App</title>\n");
      out.write("        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\n");
      out.write("\n");
      out.write("    </head>\n");
      out.write("    <style>\n");
      out.write("        * {\n");
      out.write("            box-sizing: border-box;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        body {\n");
      out.write("            font: 16px Arial;  \n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /*the container must be positioned relative:*/\n");
      out.write("        .autocomplete {\n");
      out.write("            position: relative;\n");
      out.write("            display: inline-block;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        input {\n");
      out.write("            border: 1px solid transparent;\n");
      out.write("            background-color: #f1f1f1;\n");
      out.write("            padding: 10px;\n");
      out.write("            font-size: 16px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        input[type=text] {\n");
      out.write("            background-color: #f1f1f1;\n");
      out.write("            width: 100%;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        input[type=submit] {\n");
      out.write("            background-color: DodgerBlue;\n");
      out.write("            color: #fff;\n");
      out.write("            cursor: pointer;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .autocomplete-items {\n");
      out.write("            position: absolute;\n");
      out.write("            border: 1px solid #d4d4d4;\n");
      out.write("            border-bottom: none;\n");
      out.write("            border-top: none;\n");
      out.write("            z-index: 99;\n");
      out.write("            /*position the autocomplete items to be the same width as the container:*/\n");
      out.write("            top: 100%;\n");
      out.write("            left: 0;\n");
      out.write("            right: 0;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        .autocomplete-items div {\n");
      out.write("            padding: 10px;\n");
      out.write("            cursor: pointer;\n");
      out.write("            background-color: #fff; \n");
      out.write("            border-bottom: 1px solid #d4d4d4; \n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /*when hovering an item:*/\n");
      out.write("        .autocomplete-items div:hover {\n");
      out.write("            background-color: #e9e9e9; \n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /*when navigating through the items using the arrow keys:*/\n");
      out.write("        .autocomplete-active {\n");
      out.write("            background-color: DodgerBlue !important; \n");
      out.write("            color: #ffffff; \n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("    <body>\n");
      out.write("        <div class=\"container-fluid\">\n");
      out.write("            <div>\n");
      out.write("                <h2>Check weather in...</h2>\n");
      out.write("                <p>Search: </p>\n");
      out.write("                <form action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/weather\" method=\"post\">\n");
      out.write("                    <div class=\"autocomplete\" style=\"width:300px;\">\n");
      out.write("                        <input id=\"myInput\" type=\"text\" name=\"name\" />\n");
      out.write("                    </div>\n");
      out.write("                    <input id=\"search\" type=\"submit\">\n");
      out.write("                </form>\n");
      out.write("            </div>\n");
      out.write("            <hr> \n");
      out.write("            <div>\n");
      out.write("               \n");
      out.write("                <table class=\"table-responsive-sm table-bordered text-center\">\n");
      out.write("                    <thead>\n");
      out.write("                        <tr>\n");
      out.write("                            <th>List of Locations</th>\n");
      out.write("                        </tr>\n");
      out.write("                    </thead>\n");
      out.write("                    <tbody>\n");
      out.write("                        ");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("\n");
      out.write("                    </tbody>\n");
      out.write("                </table>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <script>\n");
      out.write("            function autocomplete(inp, arr) {\n");
      out.write("                /*the autocomplete function takes two arguments,\n");
      out.write("                 the text field element and an array of possible autocompleted values:*/\n");
      out.write("                var currentFocus;\n");
      out.write("                /*execute a function when someone writes in the text field:*/\n");
      out.write("                inp.addEventListener(\"input\", function (e) {\n");
      out.write("                    var a, b, i, val = this.value;\n");
      out.write("                    /*close any already open lists of autocompleted values*/\n");
      out.write("                    closeAllLists();\n");
      out.write("                    if (!val) {\n");
      out.write("                        return false;\n");
      out.write("                    }\n");
      out.write("                    currentFocus = -1;\n");
      out.write("                    /*create a DIV element that will contain the items (values):*/\n");
      out.write("                    a = document.createElement(\"DIV\");\n");
      out.write("                    a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n");
      out.write("                    a.setAttribute(\"class\", \"autocomplete-items\");\n");
      out.write("                    /*append the DIV element as a child of the autocomplete container:*/\n");
      out.write("                    this.parentNode.appendChild(a);\n");
      out.write("                    /*for each item in the array...*/\n");
      out.write("                    for (i = 0; i < arr.length; i++) {\n");
      out.write("                        /*check if the item starts with the same letters as the text field value:*/\n");
      out.write("                        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {\n");
      out.write("                            /*create a DIV element for each matching element:*/\n");
      out.write("                            b = document.createElement(\"DIV\");\n");
      out.write("                            /*make the matching letters bold:*/\n");
      out.write("                            b.innerHTML = \"<strong>\" + arr[i].substr(0, val.length) + \"</strong>\";\n");
      out.write("                            b.innerHTML += arr[i].substr(val.length);\n");
      out.write("                            /*insert a input field that will hold the current array item's value:*/\n");
      out.write("                            b.innerHTML += \"<input type='hidden' value='\" + arr[i] + \"'>\";\n");
      out.write("                            /*execute a function when someone clicks on the item value (DIV element):*/\n");
      out.write("                            b.addEventListener(\"click\", function (e) {\n");
      out.write("                                /*insert the value for the autocomplete text field:*/\n");
      out.write("                                inp.value = this.getElementsByTagName(\"input\")[0].value;\n");
      out.write("                                /*close the list of autocompleted values,\n");
      out.write("                                 (or any other open lists of autocompleted values:*/\n");
      out.write("                                closeAllLists();\n");
      out.write("                            });\n");
      out.write("                            a.appendChild(b);\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("                /*execute a function presses a key on the keyboard:*/\n");
      out.write("                inp.addEventListener(\"keydown\", function (e) {\n");
      out.write("                    var x = document.getElementById(this.id + \"autocomplete-list\");\n");
      out.write("                    if (x)\n");
      out.write("                        x = x.getElementsByTagName(\"div\");\n");
      out.write("                    if (e.keyCode == 40) {\n");
      out.write("                        /*If the arrow DOWN key is pressed,\n");
      out.write("                         increase the currentFocus variable:*/\n");
      out.write("                        currentFocus++;\n");
      out.write("                        /*and and make the current item more visible:*/\n");
      out.write("                        addActive(x);\n");
      out.write("                    } else if (e.keyCode == 38) { //up\n");
      out.write("                        /*If the arrow UP key is pressed,\n");
      out.write("                         decrease the currentFocus variable:*/\n");
      out.write("                        currentFocus--;\n");
      out.write("                        /*and and make the current item more visible:*/\n");
      out.write("                        addActive(x);\n");
      out.write("                    } else if (e.keyCode == 13) {\n");
      out.write("                        /*If the ENTER key is pressed, prevent the form from being submitted,*/\n");
      out.write("                        e.preventDefault();\n");
      out.write("                        if (currentFocus > -1) {\n");
      out.write("                            /*and simulate a click on the \"active\" item:*/\n");
      out.write("                            if (x)\n");
      out.write("                                x[currentFocus].click();\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("                function addActive(x) {\n");
      out.write("                    /*a function to classify an item as \"active\":*/\n");
      out.write("                    if (!x)\n");
      out.write("                        return false;\n");
      out.write("                    /*start by removing the \"active\" class on all items:*/\n");
      out.write("                    removeActive(x);\n");
      out.write("                    if (currentFocus >= x.length)\n");
      out.write("                        currentFocus = 0;\n");
      out.write("                    if (currentFocus < 0)\n");
      out.write("                        currentFocus = (x.length - 1);\n");
      out.write("                    /*add class \"autocomplete-active\":*/\n");
      out.write("                    x[currentFocus].classList.add(\"autocomplete-active\");\n");
      out.write("                }\n");
      out.write("                function removeActive(x) {\n");
      out.write("                    /*a function to remove the \"active\" class from all autocomplete items:*/\n");
      out.write("                    for (var i = 0; i < x.length; i++) {\n");
      out.write("                        x[i].classList.remove(\"autocomplete-active\");\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("                function closeAllLists(elmnt) {\n");
      out.write("                    /*close all autocomplete lists in the document,\n");
      out.write("                     except the one passed as an argument:*/\n");
      out.write("                    var x = document.getElementsByClassName(\"autocomplete-items\");\n");
      out.write("                    for (var i = 0; i < x.length; i++) {\n");
      out.write("                        if (elmnt != x[i] && elmnt != inp) {\n");
      out.write("                            x[i].parentNode.removeChild(x[i]);\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("                /*execute a function when someone clicks in the document:*/\n");
      out.write("                document.addEventListener(\"click\", function (e) {\n");
      out.write("                    closeAllLists(e.target);\n");
      out.write("                });\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            /*An array containing all the country names in the world:*/\n");
      out.write("            var countries = [\"Aveiro\", \"Beja\", \"Braga\", \"Bragança\", \"Castelo Branco\", \"Coimbra\", \"Évora\", \"Faro\", \"Guarda\", \"Leiria\", \"Lisboa\", \"Lisboa - Jardim Botânico\", \"Portalegre\", \"Porto\", \"Santarém\", \"Setúbal\", \"Viana do Castelo\", \"Vila Real\", \"Viseu\", \"Funchal\", \"Porto Santo\", \"Vila do Porto\", \"Ponta Delgada\", \"Angra do Heroísmo\", \"Santa Cruz da Graciosa\", \"Velas\", \"Madalena\", \"Horta\", \"Santa Cruz das Flores\", \"Vila do Corvo\"]\n");
      out.write("\n");
      out.write("            /*initiate the autocomplete function on the \"myInput\" element, and pass along the countries array as possible autocomplete values:*/\n");
      out.write("            autocomplete(document.getElementById(\"myInput\"), countries);\n");
      out.write("        </script>\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/weather.jsp(104,24) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/weather.jsp(104,24) '${districtData}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${districtData}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/weather.jsp(104,24) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("district");
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\n");
            out.write("                            <tr>\n");
            out.write("                                <td>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${district.local}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</td>\n");
            out.write("                            </tr>\n");
            out.write("                        ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }
}
